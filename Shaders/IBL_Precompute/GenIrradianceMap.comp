
#version 450

#define PI 3.14159265359
#define MAX_SAMPLES 1000

layout(local_size_x = 16, local_size_y = 16) in;
// layout(set=0, binding=0, rgba8) uniform readonly image2D environmentMap;
layout(set=0, binding=0) uniform sampler2D environmentMap;
layout(set=0, binding=1) uniform writeonly image2D irradianceMap;

layout(push_constant) uniform PushConstants {
  float width;
  float height;
} pushConstants;


// Useful functions for transforming directions
// TODO: check if the exact tangent, bitangent coords matter
void coordinateSystem(in vec3 v1, out vec3 v2, out vec3 v3) {
    if (abs(v1.x) > abs(v1.y))
            v2 = vec3(-v1.z, 0, v1.x) / sqrt(v1.x * v1.x + v1.z * v1.z);
        else
            v2 = vec3(0, v1.z, -v1.y) / sqrt(v1.y * v1.y + v1.z * v1.z);
        v3 = cross(v1, v2);
}

mat3 LocalToWorld(vec3 nor) {
    vec3 tan, bit;
    coordinateSystem(nor, tan, bit);
    return mat3(tan, bit, nor);
}

// Random number generator and sample warping
// from ShaderToy https://www.shadertoy.com/view/4tXyWN
uvec2 seed;
float rng() {
    seed += uvec2(1);
    uvec2 q = 1103515245U * ( (seed >> 1U) ^ (seed.yx) );
    uint  n = 1103515245U * ( (q.x) ^ (q.y >> 3U) );
    return float(n) * (1.0 / float(0xffffffffU));
}

vec3 squareToDiskConcentric(vec2 xi) {
  vec2 remappedRange = 2.0 * xi - 1.0;

  if (remappedRange.x == 0.0 && remappedRange.y == 0.0) {
    return vec3(0.0);
  }

  float theta;
  float r;
  if (abs(remappedRange.x) > abs(remappedRange.y)) {
    r = remappedRange.x;
    theta = 0.25 * PI * remappedRange.y / remappedRange.x;
  } else {
    r = remappedRange.y;
    theta = 0.5 * PI - 0.25 * PI * remappedRange.x / remappedRange.y;
  }

  return r * vec3(cos(theta), sin(theta), 0.0);
}

vec3 squareToHemisphereCosine(vec2 xi) {
    vec3 diskSample = squareToDiskConcentric(xi);
    return vec3(
        diskSample.x, 
        diskSample.y, 
        sqrt(clamp(1.0 - length(diskSample), 0.0, 1.0)));
}

vec3 sampleHemisphereCosine() {
  return squareToHemisphereCosine(vec2(rng(), rng()));
}

// Samples environment map given direction, as if it was a cubemap
// X is to the right, Y is up, and Z is to the back,
// so (0, 0, -1) points towards the center of the environment map.
vec3 sampleEnvMap(vec3 dir) {
  float pitch = 0.0;
  float yaw = 0.0;

  // Can only safely determine yaw if the xz projection has
  // a magnitude greater than epsilon
  float lenXz = length(dir.xz);
  if (lenXz > 0.001) {
    yaw = atan(dir.z, dir.x);
    pitch = atan(dir.y / lenXz);
  } else if (dir.y > 0.0) {
    pitch = 0.5 * PI;
  } else {
    pitch = -0.5 * PI;
  }

  vec2 uv = vec2(
      yaw / (2.0 * PI) + 0.5,
      pitch / PI + 0.5);

  vec3 color = texture(environmentMap, uv).rgb;
  //color = color / (color + vec3(1.0));
  // color = pow(color, vec3(2.2));
  return color;
}

// Irradiance map generation 

void main() {
  seed = uvec2(gl_GlobalInvocationID.xy);
  ivec2 texelPos = ivec2(gl_GlobalInvocationID.xy);
  vec2 texelUv = vec2(texelPos) / vec2(pushConstants.width, pushConstants.height);

  float yaw = PI * (2.0 * texelUv.x - 1.0);
  float pitch = PI * (texelUv.y - 0.5);
  
  vec3 nor = vec3(cos(pitch) * cos(yaw), sin(pitch), cos(pitch) * sin(yaw));
  mat3 localToWorld = LocalToWorld(nor);

  vec3 irradiance = vec3(0.0);
  int sampleCount = 0;
  for (int i = 0; i < MAX_SAMPLES; ++i) {
    vec3 sampleDir = (localToWorld * sampleHemisphereCosine());
    float cosTheta = dot(sampleDir, nor);
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);
    // TODO: Is this sinTheta term correct?
    irradiance += sampleEnvMap(sampleDir) * sinTheta * cosTheta;
  }

  // The PI term here is used to compensate for the cosine-weighted
  // sampling bias.
  vec4 color = vec4(PI * irradiance / float(MAX_SAMPLES), 1.0);

  // color.rgb = sampleEnvMap(localToWorld * sampleHemisphereCosine());

  // HDR to linear
  // color.rgb = color.rgb / (color.rgb + vec3(1.0));
  // Gamma correct
  // color.rgb = pow(color.rgb, vec3(1.0 / 2.2));

  imageStore(irradianceMap, texelPos, color);
}




