Loose thoughts that haven't been put into the roadmap / readme:

-In the future, will need to consider UBOs that might have to be "ocassionally"
updated, but not every frame - these resources will not be able to leverage the
per-frame stack. For this case, we will need a way to dynamically create a new UBO,
upload the data as needed, and age out the old one (2 or 3 frames later).
-"Dynamic Uniform Buffer"?
-Write up credits / inspiration / learning references in Readme

Issues from shader-reloading:
-DescriptorSet references invalid material allocator. Solution is to share material 
allocator when recreating pipeline - but it also begs the question whether DescriptorSets
freeing themselves back to the allocator by reference is suspicious.

-DescriptorAssignment, DescriptorSet, and DescriptorSetAllocator are suspicious, might
need a small cleanup / refactor
-Skybox is becoming a strange class, it is no longer fully self-contained
since the cubemap texture is now used from the global descriptor set 
-stress test object count
-batched UBO updates?
-Tentative architecture diagram / writeup
-decouple engine code from "application code"
-A default world-space grid + axes gizmo
-Fix CMake build rules for directories (copying resources to build folder)

Bugs:
-DescriptorSetAllocator is not properly movable
-Fix camera recentering when mouse needs to recenter

-Organize code into subfolders
-"user application" code hot-reloading??

Other notes:
-Each object should not need a separate uniform buffer, should pipeline object keep 
UBO that primitives index into??
-Decouple gltf primitive logic from general primitive logic
-May want to refactor ImageUtilities? Does it work well with refactored graphics pipeline?
-const correctness for Application class?