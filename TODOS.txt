Loose thoughts that haven't been put into the roadmap / readme:

Important!!:
-Make Althea into a shared_library! 
-Dynamically link in game instances, hot-reload, easy switching between games, etc.
-First step, setup Althea as a static library, use as a submodule

Also important!
-Some exceptions cause state with unfreed allocations
-This causes the allocator to crash instead of the original exception being
visible
-Either handle errors and bulk de-allocate...
-OR come up with idiomatic way to avoid unclear allocation state.

-addTextureBinding should not have default shaderStage argument

Build-related:
-Avoid or automate shaderc "git-sync-deps
-Avoid python dependency
-glm is included as a submodule twice, once in native, once in Althea


-Refactor Texture and Cubemap to all use the Image class (remove ImageUtilities)

-In the future, will need to consider UBOs that might have to be "ocassionally"
updated, but not every frame - these resources will not be able to leverage the
per-frame stack. For this case, we will need a way to dynamically create a new UBO,
upload the data as needed, and age out the old one (2 or 3 frames later).
-"Dynamic Uniform Buffer"?
-Write up credits / inspiration / learning references in Readme

-Consider multiple queues when implementing multithreaded renderer, (e.g., background compute queues)

-DescriptorAssignment, DescriptorSet, and DescriptorSetAllocator are suspicious, might
need a small cleanup / refactor
-Skybox is becoming a strange class, it is no longer fully self-contained
since the cubemap texture is now used from the global descriptor set 
-stress test object count
-batched UBO updates?
-Tentative architecture diagram / writeup
-decouple engine code from "application code"
-A default world-space grid + axes gizmo
-Fix CMake build rules for directories (copying resources to build folder)

Bugs:
-DescriptorSetAllocator is not properly movable
-Fix camera recentering when mouse needs to recenter

-Organize code into subfolders
-"user application" code hot-reloading??

Other notes:
-Each object should not need a separate uniform buffer, should pipeline object keep 
UBO that primitives index into??
-Decouple gltf primitive logic from general primitive logic
-May want to refactor ImageUtilities? Does it work well with refactored graphics pipeline?
-const correctness for Application class?