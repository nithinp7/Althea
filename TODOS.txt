
Short-term goals / logistics:
-Camera system with basic movement
-Implement input system around glfw
-Mouse controls
-Velocity-based, feedback controller for smooth input reaction
-Use Press / Release instead of Repeat for key input
-Basic skybox 
-Tentative architecture diagram / writeup
-Simple scene graph / ECS system.
-decouple engine code from "application code"
-Mip-maps
-Abstract descriptor set management (reference vkguide)
-A default world-space grid (different shader model etc)
-clang format
-Update Cesium Native when this becomes stable again
-Fix CMake build rules for directories (copying resources to build folder)

Long-term
-Integrate unit test framework / write unit tests
-Put together more concrete readme with roadmap
-More thorough documentation.
-Organize code into subfolders
-Revisit RenderPass code, is it properly decoupled from Primitives? 
-Deferred rendering setup?
-Shader hot-reloading
-Basic Imgui elements
-Better Vulkan memory management (external lib?)
-3D Tiles support
-Multithreaded rendering / job system
-More elegant shader compilation, allow conditional compilation, cached variant generation etc.
-Menu system for loading / unloading models, adjusting settings etc
-"user application" code hot-reloading??